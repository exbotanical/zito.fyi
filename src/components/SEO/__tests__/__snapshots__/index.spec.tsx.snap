// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component SEO renders correctly for posts 1`] = `
<HelmetWrapper
  defer={true}
  encodeSpecialCharacters={true}
  htmlAttributes={
    {
      "lang": "en",
    }
  }
>
  <title>
    Lorem Ipsum
  </title>
  <link
    href=""
    rel="icon"
  />
  <meta
    content="dark light"
    name="color-scheme"
  />
  <meta
    content="this is a post description"
    name="description"
  />
  <meta
    content="5.jpg"
    name="image"
  />
  <meta
    content="Lorem Ipsum"
    property="og:title"
  />
  <meta
    content="post"
    property="og:type"
  />
  <meta
    content="https://zito.fyi/lorem-ipsum"
    property="og:url"
  />
  <meta
    content="5.jpg"
    property="og:image"
  />
  <meta
    content="CoverImageAlt"
    property="og:image:alt"
  />
  <meta
    content="Matthew Zito's Blog"
    property="og:site_name"
  />
  <meta
    content="this is a post description"
    property="og:description"
  />
  <meta
    content="2021-01-06T00:00:00.000Z"
    property="article:published_time"
  />
  <meta
    content="2021-01-09T00:00:00.000Z"
    property="article:modified_time"
  />
  <meta
    content="http://examples.opengraphprotocol.us/profile.html"
    property="article:author"
  />
  <meta
    content="Matthew"
    property="profile:first_name"
  />
  <meta
    content="Zito"
    property="profile:last_name"
  />
  <meta
    content="goldmund"
    property="profile:username"
  />
  <meta
    content="technology"
    property="article:section"
  />
  <meta
    content="programming"
    property="article:tag"
  />
  <meta
    content="javascript"
    property="article:tag"
  />
  <script
    type="application/ld+json"
  >
    {"@context":"http://schema.org","@type":"BlogPosting","articleBody":"\\ntitle: \\"Lorem Ipsum\\"\\ncover: images/kali-15.jpg\\ncoverAlt: \\"An image of the Goddess Kali\\"\\ndescription: \\"this is a post description\\"\\ndatePublished: \\"2021-01-06\\"\\ndateModified: \\"2021-01-09\\"\\ncategory: \\"technology\\"\\ntags:\\n  programming\\n  javascript\\n  software engineering\\n\\nDillinger\\nThe Last Markdown Editor, Ever\\n\\nN|Solid\\n\\nBuild Status\\n\\nDillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.\\n\\nType some Markdown on the left\\nSee HTML in the right\\n✨Magic ✨\\n\\nFeatures\\n\\nImport a HTML file and watch it magically convert to Markdown\\nDrag and drop images (requires your Dropbox account be linked)\\nImport and save files from GitHub, Dropbox, Google Drive and One Drive\\nDrag and drop markdown and HTML files into Dillinger\\nExport documents as Markdown, HTML and PDF\\n\\nMarkdown is a lightweight markup language based on the formatting conventions\\nthat people naturally use in email.\\nAs John Gruber] writes on the [Markdown site\\n\\n&gt; The overriding design goal for Markdown's\\n&gt; formatting syntax is to make it as readable\\n&gt; as possible. The idea is that a\\n&gt; Markdown-formatted document should be\\n&gt; publishable as-is, as plain text, without\\n&gt; looking like it's been marked up with tags\\n&gt; or formatting instructions.\\n\\nThis text you see here is *actually- written in Markdown! To get a feel\\nfor Markdown's syntax, type some text into the left window and\\nwatch the results in the right.\\n\\nTech\\n\\nDillinger uses a number of open source projects to work properly:\\n\\n[AngularJS] - HTML enhanced for web apps!\\n[Ace Editor] - awesome web-based text editor\\n[markdown-it] - Markdown parser done right. Fast and easy to extend.\\n[Twitter Bootstrap] - great UI boilerplate for modern web apps\\n[node.js] - evented I/O for the backend\\n[Express] - fast node.js network app framework [@tjholowaychuk]\\n[Gulp] - the streaming build system\\nBreakdance - HTML\\nto Markdown converter\\n[jQuery] - duh\\n\\nAnd of course Dillinger itself is open source with a public repository\\n on GitHub.\\n\\nInstallation\\n\\nDillinger requires Node.js v10+ to run.\\n\\nInstall the dependencies and devDependencies and start the server.\\n\\ncd dillinger\\nnpm i\\nnode app\\n\\nFor production environments...\\n\\nnpm install --production\\nNODE_ENV=production node app\\n\\nPlugins\\n\\nDillinger is currently extended with the following plugins.\\nInstructions on how to use them in your own application are linked below.\\n\\n| Plugin | README |\\n| ------ | ------ |\\n| Dropbox | plugins/dropbox/README.md |\\n| GitHub | plugins/github/README.md |\\n| Google Drive | plugins/googledrive/README.md |\\n| OneDrive | plugins/onedrive/README.md |\\n| Medium | plugins/medium/README.md |\\n| Google Analytics | plugins/googleanalytics/README.md |\\n\\nDevelopment\\n\\nWant to contribute? Great!\\n\\nDillinger uses Gulp + Webpack for fast developing.\\nMake a change in your file and instantaneously see your updates!\\n\\nOpen your favorite Terminal and run these commands.\\n\\nFirst Tab:\\n\\nnode app\\n\\nSecond Tab:\\n\\ngulp watch\\n\\n(optional) Third:\\n\\nkarma test\\n\\nBuilding for source\\n\\nFor production release:\\n\\ngulp build --prod\\n\\nGenerating pre-built zip archives for distribution:\\n\\ngulp build dist --prod\\n\\nDocker\\n\\nDillinger is very easy to install and deploy in a Docker container.\\n\\nBy default, the Docker will expose port 8080, so change this within the\\nDockerfile if necessary. When ready, simply use the Dockerfile to\\nbuild the image.\\n\\ncd dillinger\\ndocker build -t /dillinger:\${package.json.version} .\\n\\nThis will create the dillinger image and pull in the necessary dependencies.\\nBe sure to swap out \${package.json.version} with the actual\\nversion of Dillinger.\\n\\nOnce done, run the Docker image and map the port to whatever you wish on\\nyour host. In this example, we simply map port 8000 of the host to\\nport 8080 of the Docker (or whatever port was exposed in the Dockerfile):\\n\\ndocker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger /dillinger:\${package.json.version}\\n\\n&gt; Note: --capt-add=SYS-ADMIN is required for PDF rendering.\\n\\nVerify the deployment by navigating to your server address in\\nyour preferred browser.\\n\\n127.0.0.1:8000\\n\\nLicense\\n\\nMIT\\n\\nFree Software, Hell Yeah!\\n\\n[//]: # (These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax)\\n\\n  [dill]:\\n  [git-repo-url]:\\n  [john gruber]:\\n  [df1]:\\n  [markdown-it]:\\n  [Ace Editor]:\\n  [node.js]:\\n  [Twitter Bootstrap]:\\n  [jQuery]:\\n  [@tjholowaychuk]:\\n  [express]:\\n  [AngularJS]:\\n  [Gulp]:\\n\\n  [PlDb]:\\n  [PlGh]:\\n  [PlGd]:\\n  [PlOd]:\\n  [PlMe]:\\n  [PlGa]:\\n","articleSection":"technology","author":{"@type":"Person","address":"United States","email":"exbotanical@protonmail.com","familyName":"Zito","givenName":"Matthew"},"creator":{"@type":"Person","address":"United States","email":"exbotanical@protonmail.com","familyName":"Zito","givenName":"Matthew"},"dateCreated":"2021-01-06T00:00:00.000Z","dateModified":"2021-01-09T00:00:00.000Z","datePublished":"2021-01-06T00:00:00.000Z","description":"this is a post description","headline":"Lorem Ipsum","image":"5.jpg","keywords":["programming","javascript"],"mainEntityOfPage":"True","name":"Lorem Ipsum","publisher":{"@context":"https://schema.org","@type":"Organization","description":"","logo":"","name":"","url":"https://zito.fyi"},"url":"https://zito.fyi/lorem-ipsum"}
  </script>
  <meta
    content="summary_large_image"
    name="twitter:card"
  />
  <meta
    content="Lorem Ipsum"
    name="twitter:title"
  />
  <meta
    content="this is a post description"
    name="twitter:description"
  />
  <meta
    content="5.jpg"
    name="twitter:image"
  />
  <meta
    content="CoverImageAlt"
    name="twitter:image:alt"
  />
  <meta
    content="exbotanical"
    name="twitter:creator"
  />
  <meta
    content="test"
    name="twitter:site"
  />
</HelmetWrapper>
`;

exports[`component SEO renders correctly on pages 1`] = `
<HelmetWrapper
  defer={true}
  encodeSpecialCharacters={true}
  htmlAttributes={
    {
      "lang": "en",
    }
  }
>
  <title>
    Matthew Zito's Blog
  </title>
  <link
    href=""
    rel="icon"
  />
  <meta
    content="dark light"
    name="color-scheme"
  />
  <meta
    content="Matthew Zito's Blog About Software and Programming"
    name="description"
  />
  <script
    type="application/ld+json"
  >
    {"@context":"https://schema.org","@type":"Organization","description":"","logo":"","name":"","url":"https://zito.fyi"}
  </script>
  <meta
    content="summary_large_image"
    name="twitter:card"
  />
  <meta
    content="Matthew Zito's Blog"
    name="twitter:title"
  />
  <meta
    content="Matthew Zito's Blog About Software and Programming"
    name="twitter:description"
  />
  <meta
    content="Matthew Zito's Blog About Software and Programming"
    name="twitter:image:alt"
  />
  <meta
    content="exbotanical"
    name="twitter:creator"
  />
  <meta
    content="test"
    name="twitter:site"
  />
</HelmetWrapper>
`;
